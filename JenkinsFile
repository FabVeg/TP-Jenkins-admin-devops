pipeline {
    agent any

    environment {
        GIT_REPO = 'https://github.com/FabVeg/TP-Jenkins-admin-devops.git'  // Remplace par l'URL de ton dépôt GitHub
        BRANCH = 'main'  // Remplace par la branche que tu veux utiliser
    }

    stages {
        stage('Cloner le code') {
            steps {
                script {
                    // Supprimer le répertoire existant si nécessaire
                    sh 'rm -rf TP-Jenkins-admin-devops'
                    // Cloner le dépôt depuis GitHub sans utiliser SCM Jenkins
                    sh 'git clone --branch ${BRANCH} ${GIT_REPO}'
                }
            }
        }

        stage('Installation des dépendances') {
            steps {
                script {
                    // Naviguer dans le répertoire du code cloné et installer les dépendances
                    dir('TP-Jenkins-admin-devops') {
                        sh 'pip install -r requirements.txt'  // Assure-toi d'avoir un fichier requirements.txt
                    }
                }
            }
        }

        stage('Exécution des tests') {
            steps {
                script {
                // Naviguer dans le répertoire contenant les tests
                dir('TP-Jenkins-admin-devops') {  // Assurez-vous que c'est le bon répertoire
                    sh 'python -m unittest discover'
                    }
                }
            }
        }
        
        stage('Construire l\'image Docker') {
            steps {
                script {
                    dir('TP-Jenkins-admin-devops') {
                        // Construire l'image Docker
                        sh 'docker build -t TP-Jenkins-admin-devops .'
                    }
                }
            }
        }

        stage('Pousser l\'image Docker') {
            steps {
                script {
                    dir('TP-Jenkins-admin-devops') {
                        // Pousser l'image Docker sur Docker Hub (ou un autre registre)
                        withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                            sh '''
                                echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
                                docker push TP-Jenkins-admin-devops
                            '''
                        }
                    }
                }
            }
        }

        stage('Nettoyage') {
            steps {
                script {
                    // Nettoyer les fichiers clonés après les tests
                    sh 'rm -rf TP-Jenkins-admin-devops'
                }
            }
        }
    }

    post {
        success {
            echo 'Les tests ont réussi !'
        }
        failure {
            echo 'Les tests ont échoué.'
        }
    }
}
